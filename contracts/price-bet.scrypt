contract PriceBet {

    int targetPrice;
    int decimal;
    bytes symbol;
    int timestamp;
    bytes rabinPubKey;
    PubKeyHash alicePkh;
    PubKeyHash bobPkh;

    function hashToInt(bytes x) : int {
        // expand to 3072 bits
        bytes hx = sha256(x);
        loop (11) {
            hx += sha256(hx);
        }
        return Utils.fromLEUnsigned(hx);
    }

    public function unlock(SigHashPreimage txPreimage, bytes sig, bytes msg, bytes padding, int outputAmount) {
        // check preimage
        require(Tx.checkPreimage(txPreimage));

        // verify rabin signature
        int h = this.hashToInt(msg + padding);
        int s = Utils.fromLEUnsigned(sig);
        int n = Utils.fromLEUnsigned(this.rabinPubKey);
        require((s * s) % n == h % n);

        // decode data
        // 4 bytes timestamp little endian + 8 bytes rate little endian + 1 byte decimal + 16 bytes symbol
        int timestamp = Utils.fromLEUnsigned(msg[0 : 4]);
        int price = Utils.fromLEUnsigned(msg[4 : 12]);
        int decimal = Utils.fromLEUnsigned(msg[12 : 13]);
        bytes symbol = msg[13 : 29];

        // validate data
        require(timestamp >= this.timestamp);
        require(decimal == this.decimal);
        require(symbol == this.symbol);

        // decide winner ouput according to the price
        bytes expectedOutputScript = b'';
        if (price >= this.targetPrice) {
            expectedOutputScript = Utils.buildPublicKeyHashScript(this.alicePkh);
        }
        else {
            expectedOutputScript = Utils.buildPublicKeyHashScript(this.bobPkh);
        }
        bytes expectedOutput = Utils.buildOutput(expectedOutputScript, outputAmount);

        // check output
        require(SigHash.hashOutputs(txPreimage) == hash256(expectedOutput));
    }
}
